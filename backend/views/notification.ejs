<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mes notifications</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f5f5f5;
      padding: 20px;
    }
    
    .notifications-container {
      max-width: 800px;
      margin: 0 auto;
    }
    
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .notification-card {
      margin-bottom: 15px;
      border-radius: 8px;
      overflow: hidden;
      transition: all 0.3s ease;
    }
    
    .notification-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .unread {
      border-left: 5px solid #007bff;
    }
    
    .notification-header {
      padding: 12px 15px;
      background-color: #f8f9fa;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .notification-title {
      margin: 0;
      font-size: 16px;
      font-weight: bold;
    }
    
    .notification-date {
      font-size: 12px;
      color: #6c757d;
    }
    
    .notification-body {
      padding: 15px;
      background-color: white;
    }
    
    .notification-message {
      margin: 0;
    }
    
    .notification-footer {
      padding: 10px 15px;
      background-color: white;
      border-top: 1px solid #e9ecef;
      display: flex;
      justify-content: space-between;
    }
    
    .btn-mark-read {
      color: #007bff;
      border: none;
      background: none;
      cursor: pointer;
      padding: 0;
    }
    
    .btn-delete {
      color: #dc3545;
      border: none;
      background: none;
      cursor: pointer;
      padding: 0;
    }
    
    .empty-state {
      text-align: center;
      padding: 40px;
      background-color: white;
      border-radius: 8px;
      margin-top: 20px;
    }
    
    .empty-state-icon {
      font-size: 48px;
      color: #6c757d;
      margin-bottom: 15px;
    }
    
    .back-button {
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class="notifications-container">
    <div class="page-header">
      <h1>Mes notifications <% if (unreadCount > 0) { %><span class="badge bg-primary"><%= unreadCount %></span><% } %></h1>
      
      <div>
        <% if (notifications.length > 0) { %>
          <form action="/notifications/mark-all-read" method="POST" class="d-inline">
            <button type="submit" class="btn btn-outline-primary btn-sm">Tout marquer comme lu</button>
          </form>
        <% } %>
        <a href="/user/profile" class="btn btn-outline-secondary btn-sm">Retour au profil</a>
      </div>
    </div>
    
    <% if (notifications.length > 0) { %>
      <% notifications.forEach(notification => { %>
        <div class="card notification-card <%= notification.read ? '' : 'unread' %>" id="notification-<%= notification._id %>">
          <div class="notification-header">
            <h2 class="notification-title"><%= notification.title %></h2>
            <span class="notification-date"><%= new Date(notification.createdAt).toLocaleDateString('fr-FR', { 
              year: 'numeric', 
              month: 'short', 
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            }) %></span>
          </div>
          
          <div class="notification-body">
            <p class="notification-message"><%= notification.message %></p>
            
            <% if (notification.event) { %>
              <a href="/events/<%= notification.event._id %>" class="btn btn-sm btn-primary mt-2">
                Voir l'Ã©vÃ©nement
              </a>
            <% } %>
          </div>
          
          <div class="notification-footer">
            <div>
              <% if (!notification.read) { %>
                <form action="/notifications/<%= notification._id %>/read" method="POST" class="d-inline mark-as-read-form">
                  <button type="submit" class="btn-mark-read">Marquer comme lu</button>
                </form>
              <% } %>
            </div>
            
            <form action="/notifications/<%= notification._id %>" method="POST" class="d-inline delete-notification-form">
              <input type="hidden" name="_method" value="DELETE">
              <button type="submit" class="btn-delete">Supprimer</button>
            </form>
          </div>
        </div>
      <% }) %>
    <% } else { %>
      <div class="empty-state">
        <div class="empty-state-icon">ðŸ“­</div>
        <h3>Aucune notification</h3>
        <p>Vous n'avez pas de notifications pour le moment.</p>
      </div>
    <% } %>
    
    <div class="text-center back-button">
      <a href="/" class="btn btn-primary">Retour Ã  l'accueil</a>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // JavaScript pour gÃ©rer les actions AJAX
    document.addEventListener('DOMContentLoaded', function() {
      // Fonction pour soumettre un formulaire en AJAX
      function submitFormAjax(form, successCallback) {
        const url = form.action;
        const method = form.querySelector('input[name="_method"]') 
          ? form.querySelector('input[name="_method"]').value 
          : form.method;
        
        fetch(url, {
          method: method,
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            successCallback();
          }
        })
        .catch(error => console.error('Erreur:', error));
      }
      
      // GÃ©rer le marquage comme lu
      document.querySelectorAll('.mark-as-read-form').forEach(form => {
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          
          const notificationId = this.closest('.notification-card').id.split('-')[1];
          
          submitFormAjax(this, () => {
            // Supprimer la classe 'unread'
            document.getElementById(`notification-${notificationId}`).classList.remove('unread');
            
            // Cacher le bouton "Marquer comme lu"
            this.style.display = 'none';
            
            // Mettre Ã  jour le compteur
            const badge = document.querySelector('.badge');
            if (badge) {
              const count = parseInt(badge.textContent) - 1;
              if (count > 0) {
                badge.textContent = count;
              } else {
                badge.remove();
              }
            }
          });
        });
      });
      
      // GÃ©rer la suppression
      document.querySelectorAll('.delete-notification-form').forEach(form => {
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          
          const notificationCard = this.closest('.notification-card');
          const notificationId = notificationCard.id.split('-')[1];
          
          submitFormAjax(this, () => {
            // Animer et supprimer la carte
            notificationCard.style.opacity = '0';
            setTimeout(() => {
              notificationCard.remove();
              
              // Si c'Ã©tait la derniÃ¨re notification, afficher l'Ã©tat vide
              if (document.querySelectorAll('.notification-card').length === 0) {
                const emptyState = document.createElement('div');
                emptyState.className = 'empty-state';
                emptyState.innerHTML = `
                  <div class="empty-state-icon">ðŸ“­</div>
                  <h3>Aucune notification</h3>
                  <p>Vous n'avez pas de notifications pour le moment.</p>
                `;
                
                document.querySelector('.notifications-container').appendChild(emptyState);
              }
            }, 300);
          });
        });
      });
    });
  </script>
</body>
</html>